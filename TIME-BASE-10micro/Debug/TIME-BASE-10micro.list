
TIME-BASE-10micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c30  08001c30  00011c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c40  08001c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c48  08001c48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001c5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001c5c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158e  00000000  00000000  000298f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c03  00000000  00000000  0002bfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000995e  00000000  00000000  00041beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b62a  00000000  00000000  0004b549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a4  00000000  00000000  000d6bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001c18 	.word	0x08001c18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001c18 	.word	0x08001c18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htim10; // Using timer 10 - linked to APB2 bus;

void SysTick_Handler (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_IncTick(); // Increments systick global vairable
 80004d0:	f000 f9ba 	bl	8000848 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler(); // Processes systick interrupt and calls  callback function
 80004d4:	f000 fb06 	bl	8000ae4 <HAL_SYSTICK_IRQHandler>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim10);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80004e2:	f001 f9a9 	bl	8001838 <HAL_TIM_IRQHandler>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028

080004f0 <main>:
void TIMER10_init(void);
void Error_handler(void);
void GPIO_init(void);

int main()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_Init(); // Initialize Hardware Abstraction Layer
 80004f4:	f000 f956 	bl	80007a4 <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_50_MHz); // Initialize custom clock setting (If not then internal
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f80b 	bl	8000514 <SystemClockConfig>
	                     // oscillator will be used)
	GPIO_init();
 80004fe:	f000 f883 	bl	8000608 <GPIO_init>
	TIMER10_init();
 8000502:	f000 f8a5 	bl	8000650 <TIMER10_init>

	// Start timer in interrupt mode
	HAL_TIM_Base_Start_IT(&htim10);
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x20>)
 8000508:	f001 f934 	bl	8001774 <HAL_TIM_Base_Start_IT>

	while(1);
 800050c:	e7fe      	b.n	800050c <main+0x1c>
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(uint8_t clock_frequency)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c

	memset(&osc_init, 0, sizeof(osc_init));
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fb6c 	bl	8001c08 <memset>
	memset(&clk_init, 0, sizeof(clk_init));
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2214      	movs	r2, #20
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fb65 	bl	8001c08 <memset>

	osc_init.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState            = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.HSICalibrationValue = 16;
 8000546:	2310      	movs	r3, #16
 8000548:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.PLL.PLLState        = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800054e:	2300      	movs	r3, #0
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
	switch (clock_frequency)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <SystemClockConfig+0x4a>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d017      	beq.n	800058c <SystemClockConfig+0x78>
			FLatency = FLASH_ACR_LATENCY_2WS;
			break;
		}

		default:
			return;
 800055c:	e04f      	b.n	80005fe <SystemClockConfig+0xea>
			osc_init.PLL.PLLM = 16;
 800055e:	2310      	movs	r3, #16
 8000560:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 8000562:	2364      	movs	r3, #100	; 0x64
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 8000566:	2302      	movs	r3, #2
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK| \
 800056e:	230f      	movs	r3, #15
 8000570:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_1WS;
 8000586:	2301      	movs	r3, #1
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800058a:	e016      	b.n	80005ba <SystemClockConfig+0xa6>
			osc_init.PLL.PLLM = 16;
 800058c:	2310      	movs	r3, #16
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 160;
 8000590:	23a0      	movs	r3, #160	; 0xa0
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK| \
 800059c:	230f      	movs	r3, #15
 800059e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_ACR_LATENCY_2WS;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80005b8:	bf00      	nop
	}

	if(HAL_OK != HAL_RCC_OscConfig(&osc_init))
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fc3c 	bl	8000e3c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClockConfig+0xba>
	{
		Error_handler();
 80005ca:	f000 f869 	bl	80006a0 <Error_handler>
	}

	if(HAL_OK != HAL_RCC_ClockConfig(&clk_init, FLatency))
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fea9 	bl	800132c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClockConfig+0xd0>
	{
		Error_handler();
 80005e0:	f000 f85e 	bl	80006a0 <Error_handler>
	}

	// Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005e4:	f001 f86a 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a06      	ldr	r2, [pc, #24]	; (8000604 <SystemClockConfig+0xf0>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	099b      	lsrs	r3, r3, #6
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa4d 	bl	8000a92 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005f8:	2004      	movs	r0, #4
 80005fa:	f000 fa57 	bl	8000aac <HAL_SYSTICK_CLKSourceConfig>
}
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	10624dd3 	.word	0x10624dd3

08000608 <GPIO_init>:

void GPIO_init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <GPIO_init+0x40>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <GPIO_init+0x40>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <GPIO_init+0x40>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800062a:	2320      	movs	r3, #32
 800062c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <GPIO_init+0x44>)
 800063c:	f000 fa60 	bl	8000b00 <HAL_GPIO_Init>
}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000

08000650 <TIMER10_init>:

void TIMER10_init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	htim10.Instance = TIM10;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <TIMER10_init+0x2c>)
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <TIMER10_init+0x30>)
 8000658:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 9; // Timer clock = HSI = 50 MHz
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <TIMER10_init+0x2c>)
 800065c:	2209      	movs	r2, #9
 800065e:	605a      	str	r2, [r3, #4]
	htim10.Init.Period = 50-1;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <TIMER10_init+0x2c>)
 8000662:	2231      	movs	r2, #49	; 0x31
 8000664:	60da      	str	r2, [r3, #12]
	if(HAL_OK!=HAL_TIM_Base_Init(&htim10))
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <TIMER10_init+0x2c>)
 8000668:	f001 f834 	bl	80016d4 <HAL_TIM_Base_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <TIMER10_init+0x26>
	{
		Error_handler();
 8000672:	f000 f815 	bl	80006a0 <Error_handler>
	}
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40014400 	.word	0x40014400

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800068c:	2120      	movs	r1, #32
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000690:	f000 fbba 	bl	8000e08 <HAL_GPIO_TogglePin>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000

080006a0 <Error_handler>:

void Error_handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	while(1);
 80006a4:	e7fe      	b.n	80006a4 <Error_handler+0x4>
	...

080006a8 <HAL_MspInit>:
  * @retval None
  */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
// Here we do low layer processor specific inits
	//1. Set up priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f9bb 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exception of the arm cortex mx processor
	     // System exception are controlled by system handler control and status register
	SCB->SHCSR |= (0x7)<<16; // Enable usg fault, memory fault and bus fault exceptions
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_MspInit+0x40>)
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <HAL_MspInit+0x40>)
 80006b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006bc:	6253      	str	r3, [r2, #36]	; 0x24
	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f06f 000b 	mvn.w	r0, #11
 80006c6:	f000 f9ba 	bl	8000a3e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	f06f 000a 	mvn.w	r0, #10
 80006d2:	f000 f9b4 	bl	8000a3e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	f06f 0009 	mvn.w	r0, #9
 80006de:	f000 f9ae 	bl	8000a3e <HAL_NVIC_SetPriority>

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	// 1. Enable the clock for the TIM10 peripheral
	__HAL_RCC_TIM10_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_TIM_Base_MspInit+0x3c>)
 80006fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_TIM_Base_MspInit+0x3c>)
 80006fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000702:	6453      	str	r3, [r2, #68]	; 0x44
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_TIM_Base_MspInit+0x3c>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
	// 2. Enable the IRQ of TIM 10
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000710:	2019      	movs	r0, #25
 8000712:	f000 f9b0 	bl	8000a76 <HAL_NVIC_EnableIRQ>
	// 3. Set up priority
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	210f      	movs	r1, #15
 800071a:	2019      	movs	r0, #25
 800071c:	f000 f98f 	bl	8000a3e <HAL_NVIC_SetPriority>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800

0800072c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <SystemInit+0x20>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <SystemInit+0x20>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopFillZerobss+0x26>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800077a:	f7ff ffd7 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f001 fa1f 	bl	8001bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000782:	f7ff feb5 	bl	80004f0 <main>
  bx  lr    
 8000786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	08001c50 	.word	0x08001c50
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	20000074 	.word	0x20000074

080007a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <HAL_Init+0x40>)
 80007ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_Init+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_Init+0x40>)
 80007ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x40>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f92b 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff ff66 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023c00 	.word	0x40023c00

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f943 	bl	8000a92 <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f90b 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	20000070 	.word	0x20000070

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000070 	.word	0x20000070

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff29 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff3e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff31 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffa2 	bl	80009e4 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d106      	bne.n	8000ac8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ac6:	e005      	b.n	8000ad4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ace:	f023 0304 	bic.w	r3, r3, #4
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ae8:	f000 f802 	bl	8000af0 <HAL_SYSTICK_Callback>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e159      	b.n	8000dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8148 	bne.w	8000dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d005      	beq.n	8000b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d130      	bne.n	8000bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	f003 0201 	and.w	r2, r3, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d017      	beq.n	8000bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80a2 	beq.w	8000dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a52      	ldr	r2, [pc, #328]	; (8000dec <HAL_GPIO_Init+0x2ec>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_GPIO_Init+0x202>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0x1fe>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a47      	ldr	r2, [pc, #284]	; (8000df8 <HAL_GPIO_Init+0x2f8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00d      	beq.n	8000cfa <HAL_GPIO_Init+0x1fa>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_GPIO_Init+0x2fc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x1f6>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_GPIO_Init+0x300>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_GPIO_Init+0x1f2>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000d02:	2300      	movs	r3, #0
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d14:	4935      	ldr	r1, [pc, #212]	; (8000dec <HAL_GPIO_Init+0x2ec>)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f67f aea2 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020c00 	.word	0x40020c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40013c00 	.word	0x40013c00

08000e08 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	041a      	lsls	r2, r3, #16
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43d9      	mvns	r1, r3
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	400b      	ands	r3, r1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	619a      	str	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e264      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d075      	beq.n	8000f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e5a:	4ba3      	ldr	r3, [pc, #652]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d00c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e66:	4ba0      	ldr	r3, [pc, #640]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d112      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e72:	4b9d      	ldr	r3, [pc, #628]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e7e:	d10b      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4b99      	ldr	r3, [pc, #612]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d05b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x108>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d157      	bne.n	8000f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e23f      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea0:	d106      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x74>
 8000ea2:	4b91      	ldr	r3, [pc, #580]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a90      	ldr	r2, [pc, #576]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e01d      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a8a      	ldr	r2, [pc, #552]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a87      	ldr	r2, [pc, #540]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a83      	ldr	r2, [pc, #524]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a80      	ldr	r2, [pc, #512]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fcbc 	bl	8000870 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fcb8 	bl	8000870 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e204      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0xc0>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fca8 	bl	8000870 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fca4 	bl	8000870 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e1f0      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b6c      	ldr	r3, [pc, #432]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0xe8>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d063      	beq.n	800101a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d11c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d116      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e1c4      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4952      	ldr	r1, [pc, #328]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa2:	e03a      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fac:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <HAL_RCC_OscConfig+0x2b0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fc5d 	bl	8000870 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fc59 	bl	8000870 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1a5      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4940      	ldr	r1, [pc, #256]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_RCC_OscConfig+0x2b0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc3c 	bl	8000870 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc38 	bl	8000870 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e184      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d030      	beq.n	8001088 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_RCC_OscConfig+0x2b4>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff fc1c 	bl	8000870 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fc18 	bl	8000870 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e164      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 8001050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x200>
 800105a:	e015      	b.n	8001088 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_RCC_OscConfig+0x2b4>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fc05 	bl	8000870 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106a:	f7ff fc01 	bl	8000870 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e14d      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a0 	beq.w	80011d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_RCC_OscConfig+0x2b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d121      	bne.n	8001116 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_RCC_OscConfig+0x2b8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_RCC_OscConfig+0x2b8>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010de:	f7ff fbc7 	bl	8000870 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	e011      	b.n	800110a <HAL_RCC_OscConfig+0x2ce>
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	42470000 	.word	0x42470000
 80010f0:	42470e80 	.word	0x42470e80
 80010f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f8:	f7ff fbba 	bl	8000870 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e106      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b85      	ldr	r3, [pc, #532]	; (8001320 <HAL_RCC_OscConfig+0x4e4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d106      	bne.n	800112c <HAL_RCC_OscConfig+0x2f0>
 800111e:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001122:	4a80      	ldr	r2, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6713      	str	r3, [r2, #112]	; 0x70
 800112a:	e01c      	b.n	8001166 <HAL_RCC_OscConfig+0x32a>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d10c      	bne.n	800114e <HAL_RCC_OscConfig+0x312>
 8001134:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001138:	4a7a      	ldr	r2, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6713      	str	r3, [r2, #112]	; 0x70
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001144:	4a77      	ldr	r2, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6713      	str	r3, [r2, #112]	; 0x70
 800114c:	e00b      	b.n	8001166 <HAL_RCC_OscConfig+0x32a>
 800114e:	4b75      	ldr	r3, [pc, #468]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001152:	4a74      	ldr	r2, [pc, #464]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6713      	str	r3, [r2, #112]	; 0x70
 800115a:	4b72      	ldr	r3, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	4a71      	ldr	r2, [pc, #452]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116e:	f7ff fb7f 	bl	8000870 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fb7b 	bl	8000870 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	; 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0c5      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ee      	beq.n	8001176 <HAL_RCC_OscConfig+0x33a>
 8001198:	e014      	b.n	80011c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fb69 	bl	8000870 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fb65 	bl	8000870 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0af      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ee      	bne.n	80011a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d105      	bne.n	80011d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a55      	ldr	r2, [pc, #340]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 80011d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 809b 	beq.w	8001316 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d05c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d141      	bne.n	8001278 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_RCC_OscConfig+0x4ec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb39 	bl	8000870 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fb35 	bl	8000870 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e081      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69da      	ldr	r2, [r3, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	019b      	lsls	r3, r3, #6
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	3b01      	subs	r3, #1
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	061b      	lsls	r3, r3, #24
 8001244:	4937      	ldr	r1, [pc, #220]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_RCC_OscConfig+0x4ec>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb0e 	bl	8000870 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fb0a 	bl	8000870 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e056      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x41c>
 8001276:	e04e      	b.n	8001316 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_OscConfig+0x4ec>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff faf7 	bl	8000870 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff faf3 	bl	8000870 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e03f      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x44a>
 80012a4:	e037      	b.n	8001316 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e032      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d028      	beq.n	8001312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d121      	bne.n	8001312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d8:	429a      	cmp	r2, r3
 80012da:	d11a      	bne.n	8001312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012e2:	4013      	ands	r3, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d111      	bne.n	8001312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	3b01      	subs	r3, #1
 80012fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d107      	bne.n	8001312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40007000 	.word	0x40007000
 8001324:	40023800 	.word	0x40023800
 8001328:	42470060 	.word	0x42470060

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0cc      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d90c      	bls.n	8001368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0b8      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001380:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800138a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a4:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	494d      	ldr	r1, [pc, #308]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d044      	beq.n	800144c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d119      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e07f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d003      	beq.n	80013ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e067      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f023 0203 	bic.w	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4934      	ldr	r1, [pc, #208]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff fa28 	bl	8000870 <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	e00a      	b.n	800143a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fa24 	bl	8000870 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e04f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 020c 	and.w	r2, r3, #12
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	429a      	cmp	r2, r3
 800144a:	d1eb      	bne.n	8001424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d20c      	bcs.n	8001474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e032      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4916      	ldr	r1, [pc, #88]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b2:	f000 f821 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	490a      	ldr	r1, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f988 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08001c30 	.word	0x08001c30
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001510:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d00d      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x40>
 800151c:	2b08      	cmp	r3, #8
 800151e:	f200 80bd 	bhi.w	800169c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x34>
 8001526:	2b04      	cmp	r3, #4
 8001528:	d003      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x3a>
 800152a:	e0b7      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800152e:	60bb      	str	r3, [r7, #8]
       break;
 8001530:	e0b7      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001534:	60bb      	str	r3, [r7, #8]
      break;
 8001536:	e0b4      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d04d      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	099b      	lsrs	r3, r3, #6
 8001554:	461a      	mov	r2, r3
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	ea02 0800 	and.w	r8, r2, r0
 8001566:	ea03 0901 	and.w	r9, r3, r1
 800156a:	4640      	mov	r0, r8
 800156c:	4649      	mov	r1, r9
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	014b      	lsls	r3, r1, #5
 8001578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800157c:	0142      	lsls	r2, r0, #5
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	ebb0 0008 	subs.w	r0, r0, r8
 8001586:	eb61 0109 	sbc.w	r1, r1, r9
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001598:	0182      	lsls	r2, r0, #6
 800159a:	1a12      	subs	r2, r2, r0
 800159c:	eb63 0301 	sbc.w	r3, r3, r1
 80015a0:	f04f 0000 	mov.w	r0, #0
 80015a4:	f04f 0100 	mov.w	r1, #0
 80015a8:	00d9      	lsls	r1, r3, #3
 80015aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015ae:	00d0      	lsls	r0, r2, #3
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	eb12 0208 	adds.w	r2, r2, r8
 80015b8:	eb43 0309 	adc.w	r3, r3, r9
 80015bc:	f04f 0000 	mov.w	r0, #0
 80015c0:	f04f 0100 	mov.w	r1, #0
 80015c4:	0259      	lsls	r1, r3, #9
 80015c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015ca:	0250      	lsls	r0, r2, #9
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	f7fe fdfa 	bl	80001d4 <__aeabi_uldivmod>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4613      	mov	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e04a      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	461a      	mov	r2, r3
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	ea02 0400 	and.w	r4, r2, r0
 8001602:	ea03 0501 	and.w	r5, r3, r1
 8001606:	4620      	mov	r0, r4
 8001608:	4629      	mov	r1, r5
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	014b      	lsls	r3, r1, #5
 8001614:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001618:	0142      	lsls	r2, r0, #5
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	1b00      	subs	r0, r0, r4
 8001620:	eb61 0105 	sbc.w	r1, r1, r5
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	018b      	lsls	r3, r1, #6
 800162e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001632:	0182      	lsls	r2, r0, #6
 8001634:	1a12      	subs	r2, r2, r0
 8001636:	eb63 0301 	sbc.w	r3, r3, r1
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001648:	00d0      	lsls	r0, r2, #3
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	1912      	adds	r2, r2, r4
 8001650:	eb45 0303 	adc.w	r3, r5, r3
 8001654:	f04f 0000 	mov.w	r0, #0
 8001658:	f04f 0100 	mov.w	r1, #0
 800165c:	0299      	lsls	r1, r3, #10
 800165e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001662:	0290      	lsls	r0, r2, #10
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	f7fe fdae 	bl	80001d4 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	60bb      	str	r3, [r7, #8]
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800169e:	60bb      	str	r3, [r7, #8]
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	68bb      	ldr	r3, [r7, #8]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	00f42400 	.word	0x00f42400
 80016b8:	007a1200 	.word	0x007a1200

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000000 	.word	0x20000000

080016d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e041      	b.n	800176a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe fff6 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f000 f9c0 	bl	8001a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d001      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e044      	b.n	8001816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_TIM_Base_Start_IT+0xb0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d018      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x6c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b6:	d013      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x6c>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_TIM_Base_Start_IT+0xb4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00e      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x6c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_TIM_Base_Start_IT+0xb8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d009      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x6c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_TIM_Base_Start_IT+0xbc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d004      	beq.n	80017e0 <HAL_TIM_Base_Start_IT+0x6c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_TIM_Base_Start_IT+0xc0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d111      	bne.n	8001804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d010      	beq.n	8001814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001802:	e007      	b.n	8001814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000
 8001828:	40000400 	.word	0x40000400
 800182c:	40000800 	.word	0x40000800
 8001830:	40000c00 	.word	0x40000c00
 8001834:	40014000 	.word	0x40014000

08001838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d122      	bne.n	8001894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b02      	cmp	r3, #2
 800185a:	d11b      	bne.n	8001894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0202 	mvn.w	r2, #2
 8001864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8ee 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 8001880:	e005      	b.n	800188e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8e0 	bl	8001a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f8f1 	bl	8001a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d122      	bne.n	80018e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d11b      	bne.n	80018e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0204 	mvn.w	r2, #4
 80018b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2202      	movs	r2, #2
 80018be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8c4 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 80018d4:	e005      	b.n	80018e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8b6 	bl	8001a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8c7 	bl	8001a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d122      	bne.n	800193c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b08      	cmp	r3, #8
 8001902:	d11b      	bne.n	800193c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0208 	mvn.w	r2, #8
 800190c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f89a 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 8001928:	e005      	b.n	8001936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f88c 	bl	8001a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f89d 	bl	8001a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b10      	cmp	r3, #16
 8001948:	d122      	bne.n	8001990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b10      	cmp	r3, #16
 8001956:	d11b      	bne.n	8001990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0210 	mvn.w	r2, #16
 8001960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2208      	movs	r2, #8
 8001966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f870 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 800197c:	e005      	b.n	800198a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f862 	bl	8001a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f873 	bl	8001a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0201 	mvn.w	r2, #1
 80019b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fe64 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c6:	2b80      	cmp	r3, #128	; 0x80
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d107      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8e2 	bl	8001bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	d10e      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a00:	2b40      	cmp	r3, #64	; 0x40
 8001a02:	d107      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f838 	bl	8001a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d10e      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d107      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0220 	mvn.w	r2, #32
 8001a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f8ac 	bl	8001b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <TIM_Base_SetConfig+0xe4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00f      	beq.n	8001ad0 <TIM_Base_SetConfig+0x38>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab6:	d00b      	beq.n	8001ad0 <TIM_Base_SetConfig+0x38>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <TIM_Base_SetConfig+0xe8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <TIM_Base_SetConfig+0x38>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <TIM_Base_SetConfig+0xec>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <TIM_Base_SetConfig+0x38>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <TIM_Base_SetConfig+0xf0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d108      	bne.n	8001ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <TIM_Base_SetConfig+0xe4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01b      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af0:	d017      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <TIM_Base_SetConfig+0xe8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <TIM_Base_SetConfig+0xec>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00f      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <TIM_Base_SetConfig+0xf0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00b      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <TIM_Base_SetConfig+0xf4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <TIM_Base_SetConfig+0xf8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <TIM_Base_SetConfig+0x8a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <TIM_Base_SetConfig+0xfc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d108      	bne.n	8001b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <TIM_Base_SetConfig+0xe4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d103      	bne.n	8001b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	615a      	str	r2, [r3, #20]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800
 8001b88:	40000c00 	.word	0x40000c00
 8001b8c:	40014000 	.word	0x40014000
 8001b90:	40014400 	.word	0x40014400
 8001b94:	40014800 	.word	0x40014800

08001b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <__libc_init_array>:
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	4d0d      	ldr	r5, [pc, #52]	; (8001bf8 <__libc_init_array+0x38>)
 8001bc4:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <__libc_init_array+0x3c>)
 8001bc6:	1b64      	subs	r4, r4, r5
 8001bc8:	10a4      	asrs	r4, r4, #2
 8001bca:	2600      	movs	r6, #0
 8001bcc:	42a6      	cmp	r6, r4
 8001bce:	d109      	bne.n	8001be4 <__libc_init_array+0x24>
 8001bd0:	4d0b      	ldr	r5, [pc, #44]	; (8001c00 <__libc_init_array+0x40>)
 8001bd2:	4c0c      	ldr	r4, [pc, #48]	; (8001c04 <__libc_init_array+0x44>)
 8001bd4:	f000 f820 	bl	8001c18 <_init>
 8001bd8:	1b64      	subs	r4, r4, r5
 8001bda:	10a4      	asrs	r4, r4, #2
 8001bdc:	2600      	movs	r6, #0
 8001bde:	42a6      	cmp	r6, r4
 8001be0:	d105      	bne.n	8001bee <__libc_init_array+0x2e>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be8:	4798      	blx	r3
 8001bea:	3601      	adds	r6, #1
 8001bec:	e7ee      	b.n	8001bcc <__libc_init_array+0xc>
 8001bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf2:	4798      	blx	r3
 8001bf4:	3601      	adds	r6, #1
 8001bf6:	e7f2      	b.n	8001bde <__libc_init_array+0x1e>
 8001bf8:	08001c48 	.word	0x08001c48
 8001bfc:	08001c48 	.word	0x08001c48
 8001c00:	08001c48 	.word	0x08001c48
 8001c04:	08001c4c 	.word	0x08001c4c

08001c08 <memset>:
 8001c08:	4402      	add	r2, r0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <memset+0xa>
 8001c10:	4770      	bx	lr
 8001c12:	f803 1b01 	strb.w	r1, [r3], #1
 8001c16:	e7f9      	b.n	8001c0c <memset+0x4>

08001c18 <_init>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	bf00      	nop
 8001c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1e:	bc08      	pop	{r3}
 8001c20:	469e      	mov	lr, r3
 8001c22:	4770      	bx	lr

08001c24 <_fini>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	bf00      	nop
 8001c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2a:	bc08      	pop	{r3}
 8001c2c:	469e      	mov	lr, r3
 8001c2e:	4770      	bx	lr
