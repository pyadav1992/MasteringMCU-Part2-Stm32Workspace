
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da0  08000da0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000da8  08000da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da8  08000da8  00010da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08000dbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000dbc  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005031  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f0d  00000000  00000000  0002506d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  00025f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  000264c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137c9  00000000  00000000  000269b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005205  00000000  00000000  0003a181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000802da  00000000  00000000  0003f386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d8  00000000  00000000  000bf6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d80 	.word	0x08000d80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000d80 	.word	0x08000d80

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
void Error_handler(void);

UART_HandleTypeDef huart2;

int main()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_Init(); // Initialize Hardware Abstraction Layer
 80004d0:	f000 f8b0 	bl	8000634 <HAL_Init>
	SystemClockConfig(); // Initialize custom clock setting (If not then internal
 80004d4:	f000 f805 	bl	80004e2 <SystemClockConfig>
	                     // oscillator will be used)
	UART2_Init();        // High level initialization of the UART
 80004d8:	f000 f80a 	bl	80004f0 <UART2_Init>
	return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <SystemClockConfig>:

void SystemClockConfig(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <UART2_Init>:

void UART2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;                    // USART2 base address in the peripheral memory
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <UART2_Init+0x44>)
 80004f6:	4a10      	ldr	r2, [pc, #64]	; (8000538 <UART2_Init+0x48>)
 80004f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;                // Select baudrate
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <UART2_Init+0x44>)
 80004fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000500:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B; // 8 bits in a word
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <UART2_Init+0x44>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;      // 1 stop bit
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <UART2_Init+0x44>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;       // None parity
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <UART2_Init+0x44>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE; // Hardware flow control
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <UART2_Init+0x44>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode      = UART_MODE_TX_RX;     // Rx and Tx
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <UART2_Init+0x44>)
 800051c:	220c      	movs	r2, #12
 800051e:	615a      	str	r2, [r3, #20]

	if (HAL_OK != HAL_UART_Init(&huart2))                      // Initialize the UART
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <UART2_Init+0x44>)
 8000522:	f000 f9f3 	bl	800090c <HAL_UART_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <UART2_Init+0x40>
	{
		// THere is a problem
		Error_handler();
 800052c:	f000 f806 	bl	800053c <Error_handler>
	}
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000028 	.word	0x20000028
 8000538:	40004400 	.word	0x40004400

0800053c <Error_handler>:

void Error_handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	while(1);
 8000540:	e7fe      	b.n	8000540 <Error_handler+0x4>
	...

08000544 <HAL_MspInit>:
  * @retval None
  */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
// Here we do low layer processor specific inits
	//1. Set up priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f977 	bl	800083c <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exception of the arm cortex mx processor
	     // System exception are controlled by system handler control and status register
	SCB->SHCSR |= (0x7)<<16; // Enable usg fault, memory fault and bus fault exceptions
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_MspInit+0x40>)
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_MspInit+0x40>)
 8000554:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000558:	6253      	str	r3, [r2, #36]	; 0x24
	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	f06f 000b 	mvn.w	r0, #11
 8000562:	f000 f976 	bl	8000852 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	f06f 000a 	mvn.w	r0, #10
 800056e:	f000 f970 	bl	8000852 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	f06f 0009 	mvn.w	r0, #9
 800057a:	f000 f96a 	bl	8000852 <HAL_NVIC_SetPriority>

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
// Do the low level initialization of the USART2 peripheral
	//1. Enable the clock for hte USART
	__HAL_RCC_USART1_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_UART_MspInit+0x30>)
 8000596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_UART_MspInit+0x30>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6453      	str	r3, [r2, #68]	; 0x44
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_UART_MspInit+0x30>)
 80005a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin muxing configuration

	//3. Enable the IRQ and set up the priority
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800

080005bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005fc:	4c0b      	ldr	r4, [pc, #44]	; (800062c <LoopFillZerobss+0x26>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800060a:	f7ff ffd7 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f000 fb93 	bl	8000d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000612:	f7ff ff5b 	bl	80004cc <main>
  bx  lr    
 8000616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000618:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08000db0 	.word	0x08000db0
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	2000006c 	.word	0x2000006c

08000630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_Init+0x40>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <HAL_Init+0x40>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_Init+0x40>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_Init+0x40>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_Init+0x40>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_Init+0x40>)
 8000656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f8ed 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f808 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f7ff ff6c 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023c00 	.word	0x40023c00

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x54>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x58>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f8f7 	bl	800088a <HAL_SYSTICK_Config>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e00e      	b.n	80006c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	d80a      	bhi.n	80006c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ac:	2200      	movs	r2, #0
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295
 80006b4:	f000 f8cd 	bl	8000852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_InitTick+0x5c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000004 	.word	0x20000004

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	; 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff8e 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff47 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff5c 	bl	8000720 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff8e 	bl	8000790 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5d 	bl	800073c <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffb0 	bl	80007f8 <SysTick_Config>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000

080008bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_RCC_GetHCLKFreq>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	0a9b      	lsrs	r3, r3, #10
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	4903      	ldr	r1, [pc, #12]	; (80008e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80008d2:	5ccb      	ldrb	r3, [r1, r3]
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80008d8:	4618      	mov	r0, r3
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	08000d98 	.word	0x08000d98

080008e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80008e8:	f7ff ffdc 	bl	80008a4 <HAL_RCC_GetHCLKFreq>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	0b5b      	lsrs	r3, r3, #13
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	4903      	ldr	r1, [pc, #12]	; (8000908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80008fa:	5ccb      	ldrb	r3, [r1, r3]
 80008fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000900:	4618      	mov	r0, r3
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	08000d98 	.word	0x08000d98

0800090c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e03f      	b.n	800099e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d106      	bne.n	8000938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fe28 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2224      	movs	r2, #36	; 0x24
 800093c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68da      	ldr	r2, [r3, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800094e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f829 	bl	80009a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2220      	movs	r2, #32
 8000990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2220      	movs	r2, #32
 8000998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009ac:	b09f      	sub	sp, #124	; 0x7c
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80009bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009be:	68d9      	ldr	r1, [r3, #12]
 80009c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	ea40 0301 	orr.w	r3, r0, r1
 80009c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80009ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	431a      	orrs	r2, r3
 80009d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	431a      	orrs	r2, r3
 80009da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4313      	orrs	r3, r2
 80009e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80009e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80009ec:	f021 010c 	bic.w	r1, r1, #12
 80009f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009f6:	430b      	orrs	r3, r1
 80009f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80009fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a06:	6999      	ldr	r1, [r3, #24]
 8000a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	ea40 0301 	orr.w	r3, r0, r1
 8000a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4bc5      	ldr	r3, [pc, #788]	; (8000d2c <UART_SetConfig+0x384>)
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d004      	beq.n	8000a26 <UART_SetConfig+0x7e>
 8000a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4bc3      	ldr	r3, [pc, #780]	; (8000d30 <UART_SetConfig+0x388>)
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d103      	bne.n	8000a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000a26:	f7ff ff5d 	bl	80008e4 <HAL_RCC_GetPCLK2Freq>
 8000a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8000a2c:	e002      	b.n	8000a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000a2e:	f7ff ff45 	bl	80008bc <HAL_RCC_GetPCLK1Freq>
 8000a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a3c:	f040 80b6 	bne.w	8000bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a42:	461c      	mov	r4, r3
 8000a44:	f04f 0500 	mov.w	r5, #0
 8000a48:	4622      	mov	r2, r4
 8000a4a:	462b      	mov	r3, r5
 8000a4c:	1891      	adds	r1, r2, r2
 8000a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8000a50:	415b      	adcs	r3, r3
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
 8000a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000a58:	1912      	adds	r2, r2, r4
 8000a5a:	eb45 0303 	adc.w	r3, r5, r3
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	f04f 0100 	mov.w	r1, #0
 8000a66:	00d9      	lsls	r1, r3, #3
 8000a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000a6c:	00d0      	lsls	r0, r2, #3
 8000a6e:	4602      	mov	r2, r0
 8000a70:	460b      	mov	r3, r1
 8000a72:	1911      	adds	r1, r2, r4
 8000a74:	6639      	str	r1, [r7, #96]	; 0x60
 8000a76:	416b      	adcs	r3, r5
 8000a78:	667b      	str	r3, [r7, #100]	; 0x64
 8000a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	1891      	adds	r1, r2, r2
 8000a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a88:	415b      	adcs	r3, r3
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000a94:	f7ff fb9e 	bl	80001d4 <__aeabi_uldivmod>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	4ba5      	ldr	r3, [pc, #660]	; (8000d34 <UART_SetConfig+0x38c>)
 8000a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	011e      	lsls	r6, r3, #4
 8000aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	f04f 0500 	mov.w	r5, #0
 8000aae:	4622      	mov	r2, r4
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	1891      	adds	r1, r2, r2
 8000ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8000ab6:	415b      	adcs	r3, r3
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8000aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000abe:	1912      	adds	r2, r2, r4
 8000ac0:	eb45 0303 	adc.w	r3, r5, r3
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	f04f 0100 	mov.w	r1, #0
 8000acc:	00d9      	lsls	r1, r3, #3
 8000ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ad2:	00d0      	lsls	r0, r2, #3
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	1911      	adds	r1, r2, r4
 8000ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8000adc:	416b      	adcs	r3, r5
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	1891      	adds	r1, r2, r2
 8000aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8000aee:	415b      	adcs	r3, r3
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000afa:	f7ff fb6b 	bl	80001d4 <__aeabi_uldivmod>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	4b8c      	ldr	r3, [pc, #560]	; (8000d34 <UART_SetConfig+0x38c>)
 8000b04:	fba3 1302 	umull	r1, r3, r3, r2
 8000b08:	095b      	lsrs	r3, r3, #5
 8000b0a:	2164      	movs	r1, #100	; 0x64
 8000b0c:	fb01 f303 	mul.w	r3, r1, r3
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	3332      	adds	r3, #50	; 0x32
 8000b16:	4a87      	ldr	r2, [pc, #540]	; (8000d34 <UART_SetConfig+0x38c>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	095b      	lsrs	r3, r3, #5
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000b24:	441e      	add	r6, r3
 8000b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f04f 0100 	mov.w	r1, #0
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	1894      	adds	r4, r2, r2
 8000b34:	623c      	str	r4, [r7, #32]
 8000b36:	415b      	adcs	r3, r3
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b3e:	1812      	adds	r2, r2, r0
 8000b40:	eb41 0303 	adc.w	r3, r1, r3
 8000b44:	f04f 0400 	mov.w	r4, #0
 8000b48:	f04f 0500 	mov.w	r5, #0
 8000b4c:	00dd      	lsls	r5, r3, #3
 8000b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000b52:	00d4      	lsls	r4, r2, #3
 8000b54:	4622      	mov	r2, r4
 8000b56:	462b      	mov	r3, r5
 8000b58:	1814      	adds	r4, r2, r0
 8000b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8000b5c:	414b      	adcs	r3, r1
 8000b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8000b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	461a      	mov	r2, r3
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	1891      	adds	r1, r2, r2
 8000b6c:	61b9      	str	r1, [r7, #24]
 8000b6e:	415b      	adcs	r3, r3
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000b7a:	f7ff fb2b 	bl	80001d4 <__aeabi_uldivmod>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	4b6c      	ldr	r3, [pc, #432]	; (8000d34 <UART_SetConfig+0x38c>)
 8000b84:	fba3 1302 	umull	r1, r3, r3, r2
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	2164      	movs	r1, #100	; 0x64
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	3332      	adds	r3, #50	; 0x32
 8000b96:	4a67      	ldr	r2, [pc, #412]	; (8000d34 <UART_SetConfig+0x38c>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	f003 0207 	and.w	r2, r3, #7
 8000ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4432      	add	r2, r6
 8000ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000baa:	e0b9      	b.n	8000d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bae:	461c      	mov	r4, r3
 8000bb0:	f04f 0500 	mov.w	r5, #0
 8000bb4:	4622      	mov	r2, r4
 8000bb6:	462b      	mov	r3, r5
 8000bb8:	1891      	adds	r1, r2, r2
 8000bba:	6139      	str	r1, [r7, #16]
 8000bbc:	415b      	adcs	r3, r3
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bc4:	1912      	adds	r2, r2, r4
 8000bc6:	eb45 0303 	adc.w	r3, r5, r3
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	f04f 0100 	mov.w	r1, #0
 8000bd2:	00d9      	lsls	r1, r3, #3
 8000bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000bd8:	00d0      	lsls	r0, r2, #3
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	eb12 0804 	adds.w	r8, r2, r4
 8000be2:	eb43 0905 	adc.w	r9, r3, r5
 8000be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f04f 0100 	mov.w	r1, #0
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	008b      	lsls	r3, r1, #2
 8000bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000bfe:	0082      	lsls	r2, r0, #2
 8000c00:	4640      	mov	r0, r8
 8000c02:	4649      	mov	r1, r9
 8000c04:	f7ff fae6 	bl	80001d4 <__aeabi_uldivmod>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <UART_SetConfig+0x38c>)
 8000c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	011e      	lsls	r6, r3, #4
 8000c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f04f 0100 	mov.w	r1, #0
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	1894      	adds	r4, r2, r2
 8000c24:	60bc      	str	r4, [r7, #8]
 8000c26:	415b      	adcs	r3, r3
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c2e:	1812      	adds	r2, r2, r0
 8000c30:	eb41 0303 	adc.w	r3, r1, r3
 8000c34:	f04f 0400 	mov.w	r4, #0
 8000c38:	f04f 0500 	mov.w	r5, #0
 8000c3c:	00dd      	lsls	r5, r3, #3
 8000c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000c42:	00d4      	lsls	r4, r2, #3
 8000c44:	4622      	mov	r2, r4
 8000c46:	462b      	mov	r3, r5
 8000c48:	1814      	adds	r4, r2, r0
 8000c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8000c4c:	414b      	adcs	r3, r1
 8000c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f04f 0100 	mov.w	r1, #0
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	008b      	lsls	r3, r1, #2
 8000c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000c68:	0082      	lsls	r2, r0, #2
 8000c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000c6e:	f7ff fab1 	bl	80001d4 <__aeabi_uldivmod>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <UART_SetConfig+0x38c>)
 8000c78:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	2164      	movs	r1, #100	; 0x64
 8000c80:	fb01 f303 	mul.w	r3, r1, r3
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	3332      	adds	r3, #50	; 0x32
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <UART_SetConfig+0x38c>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	095b      	lsrs	r3, r3, #5
 8000c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c96:	441e      	add	r6, r3
 8000c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	1894      	adds	r4, r2, r2
 8000ca6:	603c      	str	r4, [r7, #0]
 8000ca8:	415b      	adcs	r3, r3
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cb0:	1812      	adds	r2, r2, r0
 8000cb2:	eb41 0303 	adc.w	r3, r1, r3
 8000cb6:	f04f 0400 	mov.w	r4, #0
 8000cba:	f04f 0500 	mov.w	r5, #0
 8000cbe:	00dd      	lsls	r5, r3, #3
 8000cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000cc4:	00d4      	lsls	r4, r2, #3
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	462b      	mov	r3, r5
 8000cca:	eb12 0a00 	adds.w	sl, r2, r0
 8000cce:	eb43 0b01 	adc.w	fp, r3, r1
 8000cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f04f 0100 	mov.w	r1, #0
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	008b      	lsls	r3, r1, #2
 8000ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000cea:	0082      	lsls	r2, r0, #2
 8000cec:	4650      	mov	r0, sl
 8000cee:	4659      	mov	r1, fp
 8000cf0:	f7ff fa70 	bl	80001d4 <__aeabi_uldivmod>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <UART_SetConfig+0x38c>)
 8000cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2164      	movs	r1, #100	; 0x64
 8000d02:	fb01 f303 	mul.w	r3, r1, r3
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	3332      	adds	r3, #50	; 0x32
 8000d0c:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <UART_SetConfig+0x38c>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	f003 020f 	and.w	r2, r3, #15
 8000d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4432      	add	r2, r6
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	bf00      	nop
 8000d22:	377c      	adds	r7, #124	; 0x7c
 8000d24:	46bd      	mov	sp, r7
 8000d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40011400 	.word	0x40011400
 8000d34:	51eb851f 	.word	0x51eb851f

08000d38 <__libc_init_array>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	4d0d      	ldr	r5, [pc, #52]	; (8000d70 <__libc_init_array+0x38>)
 8000d3c:	4c0d      	ldr	r4, [pc, #52]	; (8000d74 <__libc_init_array+0x3c>)
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	10a4      	asrs	r4, r4, #2
 8000d42:	2600      	movs	r6, #0
 8000d44:	42a6      	cmp	r6, r4
 8000d46:	d109      	bne.n	8000d5c <__libc_init_array+0x24>
 8000d48:	4d0b      	ldr	r5, [pc, #44]	; (8000d78 <__libc_init_array+0x40>)
 8000d4a:	4c0c      	ldr	r4, [pc, #48]	; (8000d7c <__libc_init_array+0x44>)
 8000d4c:	f000 f818 	bl	8000d80 <_init>
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	10a4      	asrs	r4, r4, #2
 8000d54:	2600      	movs	r6, #0
 8000d56:	42a6      	cmp	r6, r4
 8000d58:	d105      	bne.n	8000d66 <__libc_init_array+0x2e>
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d60:	4798      	blx	r3
 8000d62:	3601      	adds	r6, #1
 8000d64:	e7ee      	b.n	8000d44 <__libc_init_array+0xc>
 8000d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6a:	4798      	blx	r3
 8000d6c:	3601      	adds	r6, #1
 8000d6e:	e7f2      	b.n	8000d56 <__libc_init_array+0x1e>
 8000d70:	08000da8 	.word	0x08000da8
 8000d74:	08000da8 	.word	0x08000da8
 8000d78:	08000da8 	.word	0x08000da8
 8000d7c:	08000dac 	.word	0x08000dac

08000d80 <_init>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr

08000d8c <_fini>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	bf00      	nop
 8000d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d92:	bc08      	pop	{r3}
 8000d94:	469e      	mov	lr, r3
 8000d96:	4770      	bx	lr
